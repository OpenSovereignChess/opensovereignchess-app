import 'package:flutter_test/flutter_test.dart';
import 'package:opensovereignchess_app/dartsovereignchess/dartsovereignchess.dart';
import 'package:opensovereignchess_app/dartsovereignchess/src/debug.dart';

void main() {
  test('SquareSet.has returns true if the SquareSet contains the given square',
      () {
    final squareSet = SquareSet(0, 0, 0, 0, 0, 0, 0, 1);
    expect(squareSet.has(Square.a1), true);

    final squareSet2 = SquareSet(0, 0, 0, 0, 0, 0, 0x1, 0);
    expect(squareSet2.has(Square.a3), true);
  });

  test(
      'SquareSet.withSquare returns a new SquareSet with the given square added',
      () {
    final squareSet = SquareSet.empty;
    final result = squareSet.withSquare(Square.a1);
    //print(humanReadableSquareSet(result));
    expect(result.has(Square.a1), true);
  });

  test('squares', () {
    expect(makeSquareSet('''
. . . . . . . . . . . . . . . 1
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . 1 . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . 1
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
1 . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
1 . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
1 . . . . . . . . . . . . . . .
''').squares.toList(), [
      Square.a1,
      Square.a3,
      Square.a6,
      Square.p9,
      Square.h13,
      Square.p16,
    ]);
  });

  test('diagonal', () {
    expect(SquareSet.diagonal, makeSquareSet('''
. . . . . . . . . . . . . . . 1
. . . . . . . . . . . . . . 1 .
. . . . . . . . . . . . . 1 . .
. . . . . . . . . . . . 1 . . .
. . . . . . . . . . . 1 . . . .
. . . . . . . . . . 1 . . . . .
. . . . . . . . . 1 . . . . . .
. . . . . . . . 1 . . . . . . .
. . . . . . . 1 . . . . . . . .
. . . . . . 1 . . . . . . . . .
. . . . . 1 . . . . . . . . . .
. . . . 1 . . . . . . . . . . .
. . . 1 . . . . . . . . . . . .
. . 1 . . . . . . . . . . . . .
. 1 . . . . . . . . . . . . . .
1 . . . . . . . . . . . . . . .
'''));
  });

  test('antidiagonal', () {
    expect(SquareSet.antidiagonal, makeSquareSet('''
1 . . . . . . . . . . . . . . .
. 1 . . . . . . . . . . . . . .
. . 1 . . . . . . . . . . . . .
. . . 1 . . . . . . . . . . . .
. . . . 1 . . . . . . . . . . .
. . . . . 1 . . . . . . . . . .
. . . . . . 1 . . . . . . . . .
. . . . . . . 1 . . . . . . . .
. . . . . . . . 1 . . . . . . .
. . . . . . . . . 1 . . . . . .
. . . . . . . . . . 1 . . . . .
. . . . . . . . . . . 1 . . . .
. . . . . . . . . . . . 1 . . .
. . . . . . . . . . . . . 1 . .
. . . . . . . . . . . . . . 1 .
. . . . . . . . . . . . . . . 1
'''));
  });

  test('shr', () {
    expect(SquareSet.antidiagonal.shr(1), makeSquareSet('''
. . . . . . . . . . . . . . . .
1 . . . . . . . . . . . . . . 1
. 1 . . . . . . . . . . . . . .
. . 1 . . . . . . . . . . . . .
. . . 1 . . . . . . . . . . . .
. . . . 1 . . . . . . . . . . .
. . . . . 1 . . . . . . . . . .
. . . . . . 1 . . . . . . . . .
. . . . . . . 1 . . . . . . . .
. . . . . . . . 1 . . . . . . .
. . . . . . . . . 1 . . . . . .
. . . . . . . . . . 1 . . . . .
. . . . . . . . . . . 1 . . . .
. . . . . . . . . . . . 1 . . .
. . . . . . . . . . . . . 1 . .
. . . . . . . . . . . . . . 1 .
'''));
    expect(SquareSet.antidiagonal.shr(32), makeSquareSet('''
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
1 . . . . . . . . . . . . . . .
. 1 . . . . . . . . . . . . . .
. . 1 . . . . . . . . . . . . .
. . . 1 . . . . . . . . . . . .
. . . . 1 . . . . . . . . . . .
. . . . . 1 . . . . . . . . . .
. . . . . . 1 . . . . . . . . .
. . . . . . . 1 . . . . . . . .
. . . . . . . . 1 . . . . . . .
. . . . . . . . . 1 . . . . . .
. . . . . . . . . . 1 . . . . .
. . . . . . . . . . . 1 . . . .
. . . . . . . . . . . . 1 . . .
. . . . . . . . . . . . . 1 . .
'''));
    expect(SquareSet.antidiagonal.shr(48), makeSquareSet('''
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
1 . . . . . . . . . . . . . . .
. 1 . . . . . . . . . . . . . .
. . 1 . . . . . . . . . . . . .
. . . 1 . . . . . . . . . . . .
. . . . 1 . . . . . . . . . . .
. . . . . 1 . . . . . . . . . .
. . . . . . 1 . . . . . . . . .
. . . . . . . 1 . . . . . . . .
. . . . . . . . 1 . . . . . . .
. . . . . . . . . 1 . . . . . .
. . . . . . . . . . 1 . . . . .
. . . . . . . . . . . 1 . . . .
. . . . . . . . . . . . 1 . . .
'''));
  });

  test('shl', () {
    expect(SquareSet.antidiagonal.shl(1), makeSquareSet('''
. 1 . . . . . . . . . . . . . .
. . 1 . . . . . . . . . . . . .
. . . 1 . . . . . . . . . . . .
. . . . 1 . . . . . . . . . . .
. . . . . 1 . . . . . . . . . .
. . . . . . 1 . . . . . . . . .
. . . . . . . 1 . . . . . . . .
. . . . . . . . 1 . . . . . . .
. . . . . . . . . 1 . . . . . .
. . . . . . . . . . 1 . . . . .
. . . . . . . . . . . 1 . . . .
. . . . . . . . . . . . 1 . . .
. . . . . . . . . . . . . 1 . .
. . . . . . . . . . . . . . 1 .
1 . . . . . . . . . . . . . . 1
. . . . . . . . . . . . . . . .
'''));
    expect(SquareSet.antidiagonal.shl(48), makeSquareSet('''
. . . 1 . . . . . . . . . . . .
. . . . 1 . . . . . . . . . . .
. . . . . 1 . . . . . . . . . .
. . . . . . 1 . . . . . . . . .
. . . . . . . 1 . . . . . . . .
. . . . . . . . 1 . . . . . . .
. . . . . . . . . 1 . . . . . .
. . . . . . . . . . 1 . . . . .
. . . . . . . . . . . 1 . . . .
. . . . . . . . . . . . 1 . . .
. . . . . . . . . . . . . 1 . .
. . . . . . . . . . . . . . 1 .
. . . . . . . . . . . . . . . 1
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
'''));
  });

  test('xor', () {
    expect(
      makeSquareSet('''
1 . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . 1 . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
''') ^ makeSquareSet('''
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . 1 . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . 1
'''),
      makeSquareSet('''
1 . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . 1 . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . 1 . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . 1
'''),
    );
  });

  test('flipVertical', () {
    final before = makeSquareSet('''
. . 1 1 1 1 1 1 1 1 1 . . . . .
. . 1 . . . . . . . . 1 . . . .
. . 1 . . . . . . . . . 1 . . .
. . 1 . . . . . . . . . 1 . . .
. . 1 . . . . . . . . . 1 . . .
. . 1 . . . . . . . . . 1 . . .
. . 1 . . . . . . . . 1 . . . .
. . 1 . . . . . . . 1 . . . . .
. . 1 . . . . . 1 1 . . . . . .
. . 1 1 1 1 1 1 . . . . . . . .
. . 1 . . . . 1 . . . . . . . .
. . 1 . . . . . 1 . . . . . . .
. . 1 . . . . . . 1 . . . . . .
. . 1 . . . . . . . 1 . . . . .
. . 1 . . . . . . . . 1 . . . .
. . 1 . . . . . . . . . 1 . . .
''');
    final after = makeSquareSet('''
. . 1 . . . . . . . . . 1 . . .
. . 1 . . . . . . . . 1 . . . .
. . 1 . . . . . . . 1 . . . . .
. . 1 . . . . . . 1 . . . . . .
. . 1 . . . . . 1 . . . . . . .
. . 1 . . . . 1 . . . . . . . .
. . 1 1 1 1 1 1 . . . . . . . .
. . 1 . . . . . 1 1 . . . . . .
. . 1 . . . . . . . 1 . . . . .
. . 1 . . . . . . . . 1 . . . .
. . 1 . . . . . . . . . 1 . . .
. . 1 . . . . . . . . . 1 . . .
. . 1 . . . . . . . . . 1 . . .
. . 1 . . . . . . . . . 1 . . .
. . 1 . . . . . . . . 1 . . . .
. . 1 1 1 1 1 1 1 1 1 . . . . .
''');
    expect(before.flipVertical(), after);
  });

  test('minus', () {
    print(humanReadableSquareSet(
        SquareSet.empty - SquareSet.fromSquare(Square.f3)));
    expect(
      SquareSet.empty - SquareSet.fromSquare(Square.f3),
      makeSquareSet('''
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
. . . . . 1 1 1 1 1 1 1 1 1 1 1
. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . .
'''),
    );
  });
}
